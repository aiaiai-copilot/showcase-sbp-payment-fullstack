/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/webhooks/yookassa": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Receive notification from YooKassa
         * @description Endpoint for receiving webhook notifications from YooKassa about payment events.
         *
         *     YooKassa sends notifications when payment status changes.
         *     Backend must respond with HTTP 200 to confirm receipt of notification.
         *
         *     If endpoint is unavailable, YooKassa will retry sending notification 7 times
         *     with intervals: 10, 42, 84, 168, 672, 5376, 86016 seconds.
         *
         *     Notifications come from IP addresses:
         *     - 185.71.76.0/27
         *     - 185.71.77.0/27
         *     - 77.75.153.0/25
         *     - 77.75.154.128/25
         */
        post: operations["receiveYooKassaWebhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    receiveYooKassaWebhook: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Message type (always notification)
                     * @example notification
                     * @enum {string}
                     */
                    type: "notification";
                    /**
                     * @description Event that occurred:
                     *     - payment.succeeded - payment successfully completed
                     *     - payment.canceled - payment canceled
                     *     - payment.waiting_for_capture - payment awaiting confirmation
                     * @example payment.succeeded
                     * @enum {string}
                     */
                    event: "payment.succeeded" | "payment.canceled" | "payment.waiting_for_capture";
                    object: {
                        /**
                         * Format: uuid
                         * @description Unique payment identifier in YooKassa
                         * @example 2c0b3e86-000f-5000-8000-18db351245c7
                         */
                        id: string;
                        /**
                         * @description Current payment status
                         * @example succeeded
                         * @enum {string}
                         */
                        status: "pending" | "waiting_for_capture" | "succeeded" | "canceled";
                        /**
                         * @description Payment paid flag
                         * @example true
                         */
                        paid?: boolean;
                        amount: {
                            /**
                             * @description Payment amount
                             * @example 100.00
                             */
                            value: string;
                            /**
                             * @description Payment currency (ISO-4217)
                             * @example RUB
                             * @enum {string}
                             */
                            currency: "RUB";
                        };
                        /** @description Payment authorization data */
                        authorization_details?: {
                            /**
                             * @description Retrieval Reference Number
                             * @example 10000000000
                             */
                            rrn?: string;
                            /**
                             * @description Authorization code
                             * @example 000000
                             */
                            auth_code?: string;
                            three_d_secure?: {
                                /**
                                 * @description Whether 3-D Secure was applied
                                 * @example true
                                 */
                                applied?: boolean;
                            };
                        };
                        /**
                         * Format: date-time
                         * @description Payment creation date and time (ISO 8601)
                         * @example 2025-10-30T10:30:00.000Z
                         */
                        created_at: string;
                        /**
                         * Format: date-time
                         * @description Payment confirmation date and time (for succeeded)
                         * @example 2025-10-30T10:32:15.000Z
                         */
                        captured_at?: string;
                        /**
                         * Format: date-time
                         * @description Payment expiration time
                         * @example 2025-10-30T11:30:00.000Z
                         */
                        expires_at?: string;
                        /**
                         * @description Transaction description
                         * @example Test payment
                         */
                        description?: string;
                        /** @description Additional payment data */
                        metadata?: {
                            [key: string]: unknown;
                        };
                        recipient?: {
                            /**
                             * @description Shop identifier in YooKassa
                             * @example 100500
                             */
                            account_id?: string;
                            /**
                             * @description Gateway identifier
                             * @example 100700
                             */
                            gateway_id?: string;
                        };
                        payment_method?: {
                            /**
                             * @description Payment method type
                             * @example sbp
                             * @enum {string}
                             */
                            type: "sbp" | "bank_card" | "yoo_money" | "qiwi" | "sberbank";
                            /**
                             * @description Payment method identifier
                             * @example 2c0b3e86-000f-5000-8000-1d1b379523c8
                             */
                            id: string;
                            /**
                             * @description Saved payment method flag
                             * @example false
                             */
                            saved?: boolean;
                            /**
                             * @description Payment method name
                             * @example SBP
                             */
                            title?: string;
                        };
                        /**
                         * @description Payment refund availability
                         * @example true
                         */
                        refundable?: boolean;
                        /**
                         * @description Test payment flag
                         * @example true
                         */
                        test: boolean;
                        income_amount?: {
                            /**
                             * @description Amount to be credited minus commission
                             * @example 98.50
                             */
                            value?: string;
                            /**
                             * @description Currency
                             * @example RUB
                             */
                            currency?: string;
                        };
                    };
                };
            };
        };
        responses: {
            /**
             * @description Notification successfully received and processed.
             *     Backend MUST return HTTP 200 to confirm receipt.
             */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /**
                     * @example {
                     *       "success": true
                     *     }
                     */
                    "application/json": {
                        /** @example true */
                        success?: boolean;
                    };
                };
            };
            /** @description Invalid notification format */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Notification processing error on recipient side */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
