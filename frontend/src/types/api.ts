/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/payments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new payment
         * @description Creates a new payment in YooKassa and returns data for displaying SBP QR code.
         *     Payment is created in test mode.
         */
        post: operations["createPayment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get payment status
         * @description Returns current payment information by its identifier
         */
        get: operations["getPaymentStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            error: {
                /**
                 * @description Error code
                 * @example invalid_request
                 */
                code: string;
                /**
                 * @description Error description
                 * @example Invalid request data
                 */
                message: string;
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    createPayment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: decimal
                     * @description Payment amount in rubles
                     * @example 100
                     */
                    amount: number;
                    /**
                     * @description Payment description (optional)
                     * @example Test payment
                     */
                    description?: string;
                };
            };
        };
        responses: {
            /** @description Payment successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * Format: uuid
                         * @description Unique payment identifier
                         * @example 2c0b3e86-000f-5000-8000-18db351245c7
                         */
                        id: string;
                        /**
                         * @description Current payment status
                         * @example pending
                         * @enum {string}
                         */
                        status: "pending" | "waiting_for_capture" | "succeeded" | "canceled";
                        amount: {
                            /**
                             * @description Payment amount
                             * @example 100.00
                             */
                            value: string;
                            /**
                             * @description Payment currency
                             * @example RUB
                             * @enum {string}
                             */
                            currency: "RUB";
                        };
                        confirmation: {
                            /**
                             * @description Payment confirmation type
                             * @example qr
                             * @enum {string}
                             */
                            type: "qr";
                            /**
                             * Format: uri
                             * @description URL for generating SBP QR code
                             * @example https://yoomoney.ru/checkout/payments/v2/contract?orderId=2c0b3e86-000f-5000-8000-18db351245c7
                             */
                            confirmation_url: string;
                        };
                        /**
                         * @description Payment description
                         * @example Test payment
                         */
                        description?: string;
                        /**
                         * @description Test payment flag
                         * @example true
                         */
                        test?: boolean;
                        /**
                         * Format: date-time
                         * @description Payment creation date and time
                         * @example 2025-10-30T10:30:00.000Z
                         */
                        created_at: string;
                    };
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /**
                     * @example {
                     *       "error": {
                     *         "code": "invalid_request",
                     *         "message": "Payment amount must be greater than 0"
                     *       }
                     *     }
                     */
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /**
                     * @example {
                     *       "error": {
                     *         "code": "internal_error",
                     *         "message": "Failed to create payment"
                     *       }
                     *     }
                     */
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getPaymentStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Unique payment identifier
                 * @example 2c0b3e86-000f-5000-8000-18db351245c7
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Payment information retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * Format: uuid
                         * @description Unique payment identifier
                         * @example 2c0b3e86-000f-5000-8000-18db351245c7
                         */
                        id: string;
                        /**
                         * @description Current payment status
                         * @example succeeded
                         * @enum {string}
                         */
                        status: "pending" | "waiting_for_capture" | "succeeded" | "canceled";
                        amount: {
                            /**
                             * @description Payment amount
                             * @example 100.00
                             */
                            value: string;
                            /**
                             * @description Payment currency
                             * @example RUB
                             * @enum {string}
                             */
                            currency: "RUB";
                        };
                        /**
                         * @description Payment description
                         * @example Test payment
                         */
                        description?: string;
                        /**
                         * @description Test payment flag
                         * @example true
                         */
                        test?: boolean;
                        /**
                         * Format: date-time
                         * @description Payment creation date and time
                         * @example 2025-10-30T10:30:00.000Z
                         */
                        created_at: string;
                        /**
                         * Format: date-time
                         * @description Payment date and time (if status is succeeded)
                         * @example 2025-10-30T10:32:15.000Z
                         */
                        paid_at?: string;
                    };
                };
            };
            /** @description Payment not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /**
                     * @example {
                     *       "error": {
                     *         "code": "not_found",
                     *         "message": "Payment with specified ID not found"
                     *       }
                     *     }
                     */
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /**
                     * @example {
                     *       "error": {
                     *         "code": "internal_error",
                     *         "message": "Failed to retrieve payment status"
                     *       }
                     *     }
                     */
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
}
